{"version":3,"sources":["../index.ts","../versions.ts","../logger.ts"],"sourcesContent":["import { type JsonMap, parse, stringify } from \"@iarna/toml\";\n\nimport { getLoader, getMappings, getQFAPI } from \"./versions\";\nimport { error, success } from \"./logger\";\nimport { readFile, writeFile } from \"fs/promises\";\n\ninterface VersionsTOML {\n  versions: { [key: string]: string };\n  libraries: {\n    [key: string]: { module: string; version: { ref: string } | string };\n  };\n  bundles: { [key: string]: string[] };\n  plugins: { [key: string]: { id: string; version: string } };\n}\n\n(async () => {\n  const textToml = await readFile(\"./gradle/libs.versions.toml\", \"utf8\");\n  const original = parse(textToml) as unknown as VersionsTOML;\n\n  const mcVersion = original.versions.minecraft;\n\n  for (const lib in original.libraries) {\n    const libObj = original.libraries[lib];\n\n    if (libObj.module === \"org.quiltmc:quilt-mappings\") {\n      const mappings = await getMappings(mcVersion);\n\n      if (mappings) {\n        if (typeof libObj.version === \"string\") {\n          original.libraries[lib].version = mappings;\n        } else {\n          // @ts-expect-error typescript did a oopsie here\n          original.versions[original.libraries[lib].version.ref] = mappings;\n        }\n\n        success(`Updated Quilt Mappings to ${mappings}`);\n      } else {\n        error(\"Failed to retrieve latest mapping version!\");\n      }\n    } else if (libObj.module === \"org.quiltmc:quilt-loader\") {\n      const loader = await getLoader(mcVersion);\n\n      if (loader) {\n        if (typeof libObj.version === \"string\") {\n          original.libraries[lib].version = loader;\n        } else {\n          // @ts-expect-error typescript did a oopsie here\n          original.versions[original.libraries[lib].version.ref] = loader;\n        }\n\n        success(`Updated Quilt Loader to ${loader}`);\n      } else {\n        error(\"Failed to retrieve latest loader version!\");\n      }\n    } else if (\n      libObj.module === \"org.quiltmc.quilted-fabric-api:quilted-fabric-api\"\n    ) {\n      const qfapi = await getQFAPI(mcVersion);\n\n      if (qfapi) {\n        if (typeof libObj.version === \"string\") {\n          original.libraries[lib].version = qfapi;\n        } else {\n          // @ts-expect-error typescript did a oopsie here\n          original.versions[original.libraries[lib].version.ref] = qfapi;\n        }\n\n        success(`Updated Quilted Fabric API to ${qfapi}`);\n      } else {\n        error(\"Failed to retrieve latest QFAPI version!\");\n      }\n    }\n  }\n\n  await writeFile(\n    \"./gradle/libs.versions.toml\",\n    `${stringify(original as unknown as JsonMap)}\\n`,\n  );\n})().catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\n","import { XMLParser } from \"fast-xml-parser\";\n\ntype MappingsResponse = {\n  gameVersion: string;\n  separator: string;\n  build: number;\n  maven: string;\n  version: string;\n  hashed: string;\n}[];\n\nexport const getMappings = async (v: string) => {\n  const res = await fetch(\n    \"https://meta.quiltmc.org/v3/versions/quilt-mappings/\" + v,\n  );\n\n  if (!res.ok) {\n    return null;\n  }\n\n  const a = await (res.json() as Promise<MappingsResponse>).then((b) => b[0]);\n\n  return a.version;\n};\n\ntype LoaderResponse = {\n  loader: {\n    separator: string;\n    build: number;\n    maven: string;\n    version: string;\n  };\n}[];\n\nexport const getLoader = async (v: string) => {\n  const res = await fetch(\"https://meta.quiltmc.org/v3/versions/loader/\" + v);\n\n  if (!res.ok) {\n    return null;\n  }\n\n  const a = await (res.json() as Promise<LoaderResponse>).then((b) => b[0]);\n\n  return a.loader.version;\n};\n\ninterface MavenXML {\n  metadata: {\n    versioning: {\n      latest: string;\n      release: string;\n      versions: { version: string[] };\n    };\n  };\n}\n\nexport const getQFAPI = async (v: string) => {\n  const res = await fetch(\n    \"https://maven.quiltmc.org/repository/release/org/quiltmc/quilted-fabric-api/quilted-fabric-api/maven-metadata.xml\",\n  );\n\n  if (!res.ok) {\n    return null;\n  }\n\n  const mavenxml = await (res.text() as Promise<string>).then((b) => {\n    return new XMLParser().parse(b) as unknown as MavenXML;\n  });\n\n  const goodVersions = mavenxml.metadata.versioning.versions.version.filter(\n    (a) => a.includes(\"-\" + v),\n  );\n\n  if (!goodVersions.length) {\n    return null;\n  }\n\n  return goodVersions[0];\n};\n","import { bold, green, red } from \"kleur\";\n\nexport const success = (a: string) => {\n  console.log(bold(green(\"✔\")) + \" \" + a);\n};\n\nexport const error = (a: string) => {\n  console.log(bold(red(\"✘\")) + \" \" + a);\n};\n"],"mappings":"AAAA,IAAAA,EAA+C,uBCA/C,IAAAC,EAA0B,2BAWbC,EAAc,MAAOC,GAAc,CAC9C,IAAMC,EAAM,MAAM,MAChB,uDAAyDD,CAC3D,EAEA,OAAKC,EAAI,IAIC,MAAOA,EAAI,KAAK,EAAgC,KAAMC,GAAMA,EAAE,EAAE,GAEjE,QALA,IAMX,EAWaC,EAAY,MAAOH,GAAc,CAC5C,IAAMC,EAAM,MAAM,MAAM,+CAAiDD,CAAC,EAE1E,OAAKC,EAAI,IAIC,MAAOA,EAAI,KAAK,EAA8B,KAAMC,GAAMA,EAAE,EAAE,GAE/D,OAAO,QALP,IAMX,EAYaE,EAAW,MAAOJ,GAAc,CAC3C,IAAMC,EAAM,MAAM,MAChB,mHACF,EAEA,GAAI,CAACA,EAAI,GACP,OAAO,KAOT,IAAMI,GAJW,MAAOJ,EAAI,KAAK,EAAsB,KAAMC,GACpD,IAAI,YAAU,EAAE,MAAMA,CAAC,CAC/B,GAE6B,SAAS,WAAW,SAAS,QAAQ,OAChEI,GAAMA,EAAE,SAAS,IAAMN,CAAC,CAC3B,EAEA,OAAKK,EAAa,OAIXA,EAAa,GAHX,IAIX,EC9EA,IAAAE,EAAiC,iBAEpBC,EAAWC,GAAc,CACpC,QAAQ,OAAI,WAAK,SAAM,QAAG,CAAC,EAAI,IAAMA,CAAC,CACxC,EAEaC,EAASD,GAAc,CAClC,QAAQ,OAAI,WAAK,OAAI,QAAG,CAAC,EAAI,IAAMA,CAAC,CACtC,EFJA,IAAAE,EAAoC,wBAWnC,SAAY,CACX,IAAMC,EAAW,QAAM,YAAS,8BAA+B,MAAM,EAC/DC,KAAW,SAAMD,CAAQ,EAEzBE,EAAYD,EAAS,SAAS,UAEpC,QAAWE,KAAOF,EAAS,UAAW,CACpC,IAAMG,EAASH,EAAS,UAAUE,GAElC,GAAIC,EAAO,SAAW,6BAA8B,CAClD,IAAMC,EAAW,MAAMC,EAAYJ,CAAS,EAExCG,GACE,OAAOD,EAAO,SAAY,SAC5BH,EAAS,UAAUE,GAAK,QAAUE,EAGlCJ,EAAS,SAASA,EAAS,UAAUE,GAAK,QAAQ,KAAOE,EAG3DE,EAAQ,6BAA6BF,GAAU,GAE/CG,EAAM,4CAA4C,CAEtD,SAAWJ,EAAO,SAAW,2BAA4B,CACvD,IAAMK,EAAS,MAAMC,EAAUR,CAAS,EAEpCO,GACE,OAAOL,EAAO,SAAY,SAC5BH,EAAS,UAAUE,GAAK,QAAUM,EAGlCR,EAAS,SAASA,EAAS,UAAUE,GAAK,QAAQ,KAAOM,EAG3DF,EAAQ,2BAA2BE,GAAQ,GAE3CD,EAAM,2CAA2C,CAErD,SACEJ,EAAO,SAAW,oDAClB,CACA,IAAMO,EAAQ,MAAMC,EAASV,CAAS,EAElCS,GACE,OAAOP,EAAO,SAAY,SAC5BH,EAAS,UAAUE,GAAK,QAAUQ,EAGlCV,EAAS,SAASA,EAAS,UAAUE,GAAK,QAAQ,KAAOQ,EAG3DJ,EAAQ,iCAAiCI,GAAO,GAEhDH,EAAM,0CAA0C,CAEpD,CACF,CAEA,QAAM,aACJ,8BACA,MAAG,aAAUP,CAA8B;AAAA,CAC7C,CACF,GAAG,EAAE,MAAOY,GAAM,CAChB,QAAQ,MAAMA,CAAC,EACf,QAAQ,KAAK,CAAC,CAChB,CAAC","names":["import_toml","import_fast_xml_parser","getMappings","v","res","b","getLoader","getQFAPI","goodVersions","a","import_kleur","success","a","error","import_promises","textToml","original","mcVersion","lib","libObj","mappings","getMappings","success","error","loader","getLoader","qfapi","getQFAPI","e"]}